{% trans_default_domain 'datagrid' %}
<table class="table js-datagrid-table" data-datagrid="{{ name|replace({'\\': '_'}) }}">
    <thead>
    <tr>
        {% for column in columns %}
            <td>
                {% if column.filterable %}
                    {{ datagrid_filter(column.filter, column.name, loop.index0) }}
                {% endif %}
            </td>
        {% endfor %}
        {% if actionColumn.hasActions() %}
            <td></td>
        {% endif %}
    </tr>
    <tr>
        {% for column in columns %}
            <th data-name="{{ column.name }}" data-orderable="{{ column.sortable ? 'true' : 'false' }}">
                {{ column.label }}
            </th>
        {% endfor %}
        {% if actionColumn.hasActions() %}
            <th data-orderable="false"></th>
        {% endif %}
    </tr>
    </thead>
</table>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const table = $('.js-datagrid-table[data-datagrid="{{ name|replace({'\\': '_'}) }}"]').DataTable({
            processing: true,
            serverSide: true,
            pageLength: {{ default.perPage }},
            order: [[{{ default.sortIndex }}, '{{ default.sortDir }}']],
            ajax: '{{ path('datagrid_ajax', {name: name}) }}',
            language: {
                emptyTable: '{{ 'grid.emptyTable'|trans }}',
                info: '{{ 'grid.info'|trans }}',
                infoEmpty: '{{ 'grid.infoEmpty'|trans }}',
                infoFiltered: '{{ 'grid.infoFiltered'|trans }}',
                lengthMenu: '{{ 'grid.lengthMenu'|trans }}',
                loadingRecords: '{{ 'grid.loadingRecords'|trans }}',
                processing: '{{ 'grid.processing'|trans }}',
                search: '{{ 'grid.search'|trans }}',
                zeroRecords: '{{ 'grid.zeroRecords'|trans }}',
                paginate: {
                    first: '{{ 'grid.paginate.first'|trans }}',
                    last: '{{ 'grid.paginate.last'|trans }}',
                    next: '{{ 'grid.paginate.next'|trans }}',
                    previous: '{{ 'grid.paginate.previous'|trans }}'
                },
                aria: {
                    sortAscending: '{{ 'grid.aria.sortAscending'|trans }}',
                    sortDescending: '{{ 'grid.aria.sortDescending'|trans }}'
                }
            }
        });

        const container = $(table.table().container());

        let timeout = null;

        const hasCustomInit = function (elem) {
            return elem.parent().hasClass('js-datagrid-number-compare') || elem.parent().parent().hasClass('js-datagrid-number-compare');
        };

        container.on('keyup', 'thead input', function () {
            const self = $(this);

            if (hasCustomInit(self)) {
                return;
            }

            clearTimeout(timeout);
            timeout = setTimeout(function () {
                table
                    .column(self.data('index'))
                    .search(self.val())
                    .draw();
            }, 200);
        });

        container.on('change', 'thead select', function () {
            const self = $(this);

            if (hasCustomInit(self)) {
                return;
            }

            table
                .column(self.data('index'))
                .search(self.val())
                .draw();
        });

        container.find('thead .js-datagrid-flatpickr').each(function () {
            const self = $(this);

            if (hasCustomInit(self)) {
                return;
            }

            flatpickr(this, {
                dateFormat: 'd.m.Y',
                locale: 'cs',
                onChange: function (selectedDates) {
                    if (selectedDates.length === 2) {
                        table
                            .column(self.data('index'))
                            .search(self.val())
                            .draw();
                    }
                }
            });
        });

        const numberCompareFunc = function () {
            const self = $(this);
            let parent = self.parent();

            if (parent.hasClass('js-datagrid-number-compare') === false) {
                parent = parent.parent();
            }

            const index = parent.children('[type=hidden]').data('index');
            const selectVal = parent.find('select').val();
            const inputVal = parent.children('[type=text]').val();

            table
                .column(index)
                .search(selectVal + '|' + inputVal)
                .draw();
        };

        container.on('change', 'thead .js-datagrid-number-compare select', numberCompareFunc);

        container.on('keyup', 'thead .js-datagrid-number-compare input[type=text]', numberCompareFunc);

        const filterHeader = container.find('.dataTables_filter');
        filterHeader.html('');

        {% for format in allowExport %}
            const exportBtn{{ format }} = $('<a href="#">Export ({{ format }})</a>').on('click', function (e) {
                e.preventDefault();
                window.open('{{ path('datagrid_export', {name: name, format: format}) }}?' + $.param(table.ajax.params()), '_blank');
            });
            filterHeader.append(exportBtn{{ format }});
            filterHeader.append('&nbsp;&nbsp;');
        {% endfor %}
    });
</script>